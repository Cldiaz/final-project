{"version":3,"sources":["routes/users.ts"],"names":[],"mappings":"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","file":"routes/users.js","sourcesContent":["import express = require('express');\r\nimport passport = require('passport');\r\nvar router = express.Router();\r\n\r\n// db references\r\nimport mongoose = require('mongoose');\r\nimport userModel = require('../models/user');\r\n\r\nimport User = userModel.User;\r\n\r\n//utility function to check if user is authenticated\r\nfunction requireAuth(req: express.Request, res: express.Response, next: any){\r\n    //check if user is log in\r\n    if(!req.isAuthenticated()){\r\n        return res.redirect('/login');\r\n    }\r\n    next();\r\n}\r\n\r\n\r\n// GET - show main users page - list all the users\r\nrouter.get('/', requireAuth,(req: express.Request, res: express.Response, next: any) => {  \r\n    // use the Users model to query the Users collection\r\n    User.find((error, users) => {\r\n        if (error) {\r\n            console.log(error);\r\n            res.end(error);\r\n        }\r\n        else {\r\n            // no error, we found a list of users\r\n            res.render('users/index', {\r\n                title: 'Users',\r\n                users: users,\r\n                displayName: req.user ? req.user.displayName : '',\r\n                type: req.user? req.user.type : ''\r\n            });\r\n        }\r\n    });\r\n});\r\n\r\n\r\n// GET my account page - show the current user in the form\r\nrouter.get('/myaccount', requireAuth, (req: express.Request, res: express.Response, next: any) => {\r\n\r\n    var id = req.user._id;\r\n\r\n    User.findById(id, (error, User) => {\r\n        if (error) {\r\n            console.log(error);\r\n            res.end(error);\r\n        }\r\n        else {\r\n            //show the edit view\r\n            res.render('users/edit', {\r\n                title: 'My Account',\r\n                user: User,\r\n                displayName: req.user ? req.user.displayName : '',\r\n                type: req.user? req.user.type : ''\r\n            });\r\n        }\r\n    });\r\n});\r\n\r\n\r\n// POST edit page - update the selected user\r\nrouter.post('/myaccount', requireAuth,(req: express.Request, res: express.Response, next: any) => {\r\n\r\n    // grab the id from the url parameter\r\n    var id = req.user._id;\r\n\r\n    // create and populate a user object\r\n    var user = new User({\r\n        _id: id,\r\n        username: req.body.username,\r\n        password: req.body.password,\r\n        email: req.body.email,\r\n        displayName: req.body.displayName,\r\n        type: req.body.type\r\n    });\r\n\r\n    // run the update using mongoose and our model\r\n    User.update({ _id: id }, user, (error) => {\r\n        if (error) {\r\n            console.log(error);\r\n            res.end(error);\r\n        }\r\n        else {\r\n            //if success update\r\n            res.redirect('/tickets');\r\n        }\r\n    });\r\n});\r\n\r\n\r\n// GET add page - show the blank form\r\nrouter.get('/add', requireAuth,(req: express.Request, res: express.Response, next: any)=> {\r\n    res.render('users/add', {\r\n        title: 'Add a New User',\r\n        displayName: req.user ? req.user.displayName : '',\r\n        type: req.user? req.user.type : ''\r\n    });\r\n});\r\n\r\n// POST add page - save the new user\r\nrouter.post('/add',requireAuth, (req: express.Request, res: express.Response, next: any) => {\r\n    User.create({\r\n        username: req.body.username,\r\n        password: req.body.password,\r\n        email: req.body.email,\r\n        displayName: req.body.displayName,\r\n        type : req.body.type\r\n    }, function(error, User) {\r\n        // did we get back an error or valid Users object?\r\n        if (error) {\r\n            console.log(error);\r\n            res.end(error);\r\n        }\r\n        else {\r\n            res.redirect('/users');\r\n        }\r\n    })\r\n});\r\n\r\n\r\n// GET edit page - show the current user in the form\r\nrouter.get('/:id', requireAuth, (req: express.Request, res: express.Response, next: any) => {\r\n\r\n    var id = req.params.id;\r\n\r\n    User.findById(id, (error, User) => {\r\n        if (error) {\r\n            console.log(error);\r\n            res.end(error);\r\n        }\r\n        else {\r\n            //show the edit view\r\n            res.render('users/edit', {\r\n                title: 'User Details',\r\n                user: User,\r\n                displayName: req.user ? req.user.displayName : '',\r\n                type: req.user? req.user.type : ''\r\n            });\r\n        }\r\n    });\r\n});\r\n\r\n\r\n// POST edit page - update the selected user\r\nrouter.post('/:id', requireAuth,(req: express.Request, res: express.Response, next: any) => {\r\n\r\n    // grab the id from the url parameter\r\n    var id = req.params.id;\r\n\r\n    // create and populate a user object\r\n    var user = new User({\r\n        _id: id,\r\n        username: req.body.username,\r\n        password: req.body.password,\r\n        email: req.body.email,\r\n        displayName: req.body.displayName,\r\n        type : req.body.type\r\n    });\r\n\r\n    // run the update using mongoose and our model\r\n    User.update({ _id: id }, user, (error) => {\r\n        if (error) {\r\n            console.log(error);\r\n            res.end(error);\r\n        }\r\n        else {\r\n            //if success update\r\n            res.redirect('/users');\r\n        }\r\n    });\r\n});\r\n\r\n\r\n// GET delete user\r\nrouter.get('/delete/:id', requireAuth,(req: express.Request, res: express.Response, next: any) => {\r\n\r\n    // get the id from the url\r\n    var id = req.params.id;\r\n\r\n    // use the model and delete this record\r\n    User.remove({ _id: id }, (error) => {\r\n        if (error) {\r\n            console.log(error);\r\n            res.end(error);\r\n        }\r\n        else {\r\n            res.redirect('/users');\r\n        }\r\n    });\r\n});\r\n\r\n\r\n\r\n// make this public\r\nmodule.exports = router;"],"sourceRoot":"/source/"}